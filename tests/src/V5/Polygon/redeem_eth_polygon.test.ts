import { processTest, populateTransaction } from "../../test.fixture";

const contractName = "LibertiVault";

const testLabel = "redeemEth"; // <= Name of the test
const testDirSuffix = "redeem_eth"; // <= directory to compare device snapshots to
const testNetwork = "polygon";
const signedPlugin = false;

const contractAddr = "0x96c8764260af62a2b2ce7d67564cb1766c6d9211";
const chainID = 137;

// From : https://polygonscan.com/tx/0x8f256d21328268af6f72ae4ac589e814b476a0487f19745fdc45a4af4ef02a3c
const inputData =
  "0xd24febcd000000000000000000000000000000000000000000000000090a290e5a6a5e7b0000000000000000000000004369cfd11f32575a539c9e64346e0f2dc531e17b0000000000000000000000004369cfd11f32575a539c9e64346e0f2dc531e17b000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003487c025200000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded100000000000000000000000096c8764260af62a2b2ce7d67564cb1766c6d921100000000000000000000000000000000000000000000000000000000008023dd000000000000000000000000000000000000000000000000a91336dc918c9d1e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018800000000000000000000000000000000000000000000000000014a00001a0020d6bdbf78c2132d05d31c914a87c6611c10748aeb04b58e8f512610f4a785f458bc144e3706575924889954946639c2132d05d31c914a87c6611c10748aeb04b58e8f000438ed17390000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d0000000000000000000000000000000000000000000000000000000064b102bf0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000008023dd000000000000000000000000000000000000000000000000cfee7c08000000000000000000000000000000000000000000000000";

const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
  {
    name: "nanos",
    label: "Nano S",
    steps: 10, // <= Define the number of steps for this test case and this device
  },
  {
    name: "nanox",
    label: "Nano X",
    steps: 6, // <= Define the number of steps for this test case and this device
  },
  {
    name: "nanosp",
    label: "Nano S+",
    steps: 6, // <= Define the number of steps for this test case and this device
  },
];

devices.forEach((device) => {
  processTest(
    device,
    contractName,
    testLabel,
    testDirSuffix,
    "",
    signedPlugin,
    serializedTx,
    testNetwork
  );
});
